apiVersion: apps/v1
kind: Deployment
metadata: { name: flask-app, namespace: {{ .Values.namespace }} }
spec:
  replicas: 2
  selector: { matchLabels: { app: flask-app } }
  template:
    metadata:
      labels:
        app: flask-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "5000"
    spec:
      imagePullSecrets:
        - name: ecr-secret
      initContainers:
        - name: run-migrations
          image: "{{ .Values.flask.image.repository }}:{{ .Values.flask.image.tag }}"
          imagePullPolicy: "{{ .Values.flask.image.pullPolicy }}"
          command: [ "sh", "-c" ]
          args:
            - >
              python manage.py create_database &&
              python manage.py create_tables &&
              python manage.py seed_data
          env:
            {{ include "flask.sharedEnv" . | indent 10 }}
      containers:
        - name: api
          image: "{{ .Values.flask.image.repository }}:{{ .Values.flask.image.tag }}"
          imagePullPolicy: "{{ .Values.flask.image.pullPolicy }}"
          env:
            {{ include "flask.sharedEnv" . | indent 10 }}
          ports: [ { containerPort: 5000 } ]
---
apiVersion: v1
kind: Service
metadata: { name: flask-app, namespace: {{ .Values.namespace }} }
spec:
  selector: { app: flask-app }
  ports: [ { port: 80, targetPort: 5000 } ]
